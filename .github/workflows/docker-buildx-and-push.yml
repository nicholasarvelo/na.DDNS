name: Docker Buildx Build & Push
run-name: docker-buildx-build-and-push

on:
  workflow_call:
    inputs:
      BUILD_ID:
        description: 'The generated build number for pull requests.'
        required: false
        type: string
      CALLER_NAME:
        description: 'The name of the caller workflow.'
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

env:
  FETCH_DEPTH: 0
  TAG_BASE_NAME: 'steptimeeditor/na.ddns'
  PUSH_TO_REGISTRY: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - name: Docker Metadata
        id: metadata
        uses: docker/metadata-action@v5.0.0
        with:
          images: |
            ${{ env.TAG_BASE_NAME }}
          tags: |
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        if: inputs.CALLER_NAME == 'generate-git-metadata'
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          labels: ${{ steps.metadata.outputs.labels }}
          push: ${{ env.PUSH_TO_REGISTRY }}
          tags: ${{ steps.metadata.outputs.tags }}
      - name: Build and push
        if: inputs.CALLER_NAME == 'generate-build-id'
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          labels: ${{ steps.metadata.outputs.labels }}
          push: ${{ env.PUSH_TO_REGISTRY }}
          tags: ${{ format('{0}:{1}', env.TAG_BASE_NAME, inputs.BUILD_ID) }}
